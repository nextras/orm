Entity
######

Entity is data crate which basically contains data for one table row. Each entity has to implement `Nextras\Orm\Entity\IEntity` interface. ORM has predefined class `Nextras\Orm\Entity\Entity`, which implement the interface and provides some useful features and proper integration with the library.

Data are stored as properties. You have to define each property which should be available. Properties are defined by Phpdoc annotations. Let's start with a basic entity:

/--php
/**
 * @property string      $name
 * @property DateTime    $born
 * @property string|NULL $web
 *
 * @property-read int    $age
 */
class Member extends Nextras\Orm\Entity\Entity
{
}
\--

Phpdoc property definition consists of type and name. If you would like to use read-only property, define it by `@property-read` annotation. It is useful to use them to define properties which are based on values of other properties. Properties could be optional/nullable. To do that, just provide another `NULL` type possibility.

If you put some value into the property, value will be validated by property type annotation. If it is possible and safe, type casting is performed. Supported types are `NULL`, `string`, `int`, `float`, `array`, `mixed` and object types. Validation is provided on all properties, except for `IPropertyContainer` and `IPropertyInjection` properties - properties with objects implementing these interfaces have to provide validation by itself.

"Property access" is the easiest way to work with the data. However, you can use "method access": `getValue` for reading a property, `setValue` for setting a property, etc. There is a special method called `getRawValue`, which returns raw representation of value. Raw representation is basically the stored value representation (eg. primary key for relationship properties).

/--php
$member = new Member();

$member->name = 'Jon';
$member->setValue('name', 'Jon');

echo $member->name;
echo $member->getValue('name');

echo isset($member->web) ? 'has web' : '-';
echo $member->hasValue('web') ? 'has web' : '-';

$member->isPersisted();
$member->isAttached();
\--

Each entity can be created "manually". Entities can be simply connected together. If you are connecting entities, at least one of them has to be attached to its repository. Attaching to the repository is letting ORM know about your entity, it does not store the entity. Attaching entity injects required dependencies into your entity (by inject property annotations or inject methods). If you need some dependency before attaching entity to the repository, feel free to pass the dependency through the constructor, which is by default empty.

Let's see an example:

/--php
$author = new Author();
$orm->authors->attach($author);

$book = new Book();
$book->author = $author;
$book->tags->set([new Tag(), new Tag()]);
\--

All created entities are automatically attached to its repositories. See more in [relationships chapter | relationships].

-----------

Property modifiers
==================

Each property could be annotated with modifier. Modifiers are optional and provide possibility to extend entity behavior. Modifiers are written after the property name. Each modifier is surrounded by braces. The first compulsory token is the modifier name, other tokens are optional and depend on the specific modifier. ORM comes with some predefined property modifiers.

- `{enum self::TYPE_*}`                   - enables extended validation against values enum.
- `{default now}`                         - defines property default value.
- `{virtual}`                             - marks property as "do not persist in storage".
- `{container ContainerClassName}`        - sets property container/injection.
- `{1:m Repository $property}`            - see [relationships].
- `{m:1 Repository $property}`            - see [relationships].
- `{1:1 Repository $property}`            - see [relationships].
- `{m:n Repository $property primary}`    - see [relationships].
- `{1:1d Repository $property primary}`   - see [relationships].

--------

{enum}
------

You can easily validate passed value by value enumeration. The set the enumeration validation, use `enum` modifier with the constant list (separated by space); or pass the constant name with a wildcard.

/--php
/**
 * @property int $type {enum self::TYPE_*}
 */
class Event extends Nextras\Orm\Entity\Entity
{
	const TYPE_PUBLIC  = 0;
	const TYPE_PRIVATE = 1;
	const TYPE_ANOTHER = 2;
}
\--

--------

{default}
---------

You can easily set the default value. Default modifier also accepts reference to constant.

/--php
/**
 * @property string  $name   {default Jon}
 * @property int     $type   {default self::TYPE_PUBLIC}
 */
class Event extends Nextras\Orm\Entity\Entity
{
	const TYPE_PUBLIC = 0;
}
\--

--------

{virtual}
---------

Use virtual modifier to let ORM know, that it shouldn't try to store the property in mapper. Useful to use with `property-read` annotation.

/--php
/**
 * @property      DateTime $born
 * @property-read int      $age    {virtual}
 */
class Member extends Nextras\Orm\Entity\Entity
{
	public function getAge()
	{
		return date('Y') - $this->born->format('Y');
	}
}

$member = new Member();
$member->born = new DateTime('2000-01-01');
echo $member->age;
\--


--------

{container} - property containers
---------------------------------

Containers encapsulate the property value.

- **IProperty** - basic container which implements `Nextras\Orm\Entity\IProperty` interface; reading and writing value do not call any special methods, retrieve the container object directly.
 *This feature is used in "has many" relationships. Reading the property value returns object container, which holds and directs the relationship.*

- **IPropertyContainer** - fully encapsulates the value; value is set by `setInjectedValue()` method, and retrieved by `getInjectedValue()` method.
 *This feature is used in "has one" relationships. Reading the property value calls `getInjectedValue()` method, writing some value internally calls `setInjectedValue()` method.*

Property containers are created by entity itself lazily (when needed).
